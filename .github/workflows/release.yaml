name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: namespace-profile-default
            name: linux-amd64
            targets: "x86_64-linux-gnu"
          - os: namespace-profile-macos-arm64
            name: macos-arm64
            targets: "aarch64-macos"
    
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Zig
        uses: mlugg/setup-zig@v2
        with:
          version: master

      - name: Install dependencies (Linux)
        if: startsWith(matrix.name, 'linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev pkg-config
      
      - name: Install dependencies (macOS)
        if: startsWith(matrix.name, 'macos')
        run: |
          brew reinstall curl
          # Set environment variables for Zig to find curl
          echo "PKG_CONFIG_PATH=/opt/homebrew/opt/curl/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Update version
        run: |
          # Extract version from tag
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "Updating version to $VERSION"
          ./.github/workflows/scripts/update-version.sh "$VERSION"
          
      - name: Build binaries
        env:
          BUILD_TARGETS: ${{ matrix.targets }}
          PLATFORM_NAME: ${{ matrix.name }}
        run: ./.github/workflows/scripts/release.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.name }}
          path: dist/*
          retention-days: 1

  release:
    needs: build
    runs-on: namespace-profile-default
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: binaries-*
          merge-multiple: true

      - name: Set up minisign
        run: |
          curl -L https://github.com/jedisct1/minisign/releases/latest/download/minisign-0.12-linux.tar.gz -o minisign.tar.gz
          tar -xf minisign.tar.gz
          sudo mv minisign-linux/x86_64/minisign /usr/local/bin/
          rm -rf minisign.tar.gz minisign-linux ._minisign-linux

      - name: Create minisign key files
        env:
          MINISIGN_SECRET_KEY: ${{ secrets.MINISIGN_SECRET_KEY }}
          MINISIGN_PUBLIC_KEY: ${{ secrets.MINISIGN_PUBLIC_KEY }}
        run: |
          echo "$MINISIGN_SECRET_KEY" > minisign.key
          echo "$MINISIGN_PUBLIC_KEY" > minisign.pub

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINISIGN_PASSWORD: ${{ secrets.MINISIGN_PASSWORD }}
        run: |
          # Get version
          TAG=$(git describe --exact-match --tags HEAD)
          VERSION=${TAG#v}
          
          # Create archives with renamed binary
          cd dist
          if [ -f cchd-linux-amd64 ]; then
            mv cchd-linux-amd64 cchd
            tar -czf cchd-linux-x64.tar.gz cchd
            mv cchd cchd-linux-amd64
          fi
          if [ -f cchd-linux-arm64 ]; then
            mv cchd-linux-arm64 cchd
            tar -czf cchd-linux-arm64.tar.gz cchd
            mv cchd cchd-linux-arm64
          fi
          if [ -f cchd-darwin-amd64 ]; then
            mv cchd-darwin-amd64 cchd
            tar -czf cchd-darwin-x64.tar.gz cchd
            mv cchd cchd-darwin-amd64
          fi
          if [ -f cchd-darwin-arm64 ]; then
            mv cchd-darwin-arm64 cchd
            tar -czf cchd-darwin-arm64.tar.gz cchd
            mv cchd cchd-darwin-arm64
          fi
          
          # Create checksums
          sha256sum *.tar.gz > checksums.txt
          
          # Sign with minisign
          for file in *.tar.gz checksums.txt; do
            echo "$MINISIGN_PASSWORD" | minisign -Sm "$file" -s ../minisign.key
          done
          
          # Copy public key
          cp ../minisign.pub .
          
          cd ..
          
          # Create release notes
          cat > release-notes.md << EOF
          ## Claude Hooks Dispatcher v${VERSION}
          
          Bridge between Claude Code hooks and custom HTTP servers.
          
          ## Installation
          
          ### macOS/Linux
          \`\`\`bash
          curl -fsSL https://raw.githubusercontent.com/sammyjoyce/cchd/main/install | bash
          \`\`\`
          
          ### Verify Signatures
          
          All binaries are signed with minisign. The public key is included in the release assets as \`minisign.pub\`.
          
          To verify:
          \`\`\`bash
          # Download the public key
          curl -LO https://github.com/sammyjoyce/cchd/releases/latest/download/minisign.pub
          
          # Verify an archive
          minisign -Vm cchd-<platform>.tar.gz -p minisign.pub
          \`\`\`
          
          ---
          **Full Changelog**: https://github.com/sammyjoyce/cchd/compare/$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "v0.0.0")...${TAG}
          EOF
          
          # Create GitHub release
          gh release create "$TAG" \
            --title "v${VERSION}" \
            --notes-file release-notes.md \
            dist/*.tar.gz \
            dist/checksums.txt \
            dist/*.minisig \
            dist/minisign.pub

      - name: Clean up
        if: always()
        run: rm -f minisign.key minisign.pub